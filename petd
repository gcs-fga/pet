#! /usr/bin/env python
# vim:ts=2:sw=2:et:ai:sts=2
#
# Copyright 2011, Ansgar Burchardt <ansgar@debian.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import pet.models

import copy
import inotifyx
import os
import os.path
import re
import subprocess
import sys


def setup_watch(path):
    fd = inotifyx.init()
    try:
        inotifyx.add_watch(fd, path, inotifyx.IN_CLOSE_WRITE |
                           inotifyx.IN_MOVED_TO)
        return fd
    except:
        os.close(fd)


def run_single_action(command, options):
    real_command = copy.copy(command)
    real_command.extend(options)
    print "I: Running {0}".format(real_command)
    retcode = subprocess.call(real_command)
    if retcode:
        print "E: Exited with code {0}".format(retcode)


def run_action(actions, filename):
    action_taken = False
    for action in actions:
        match = action['re'].search(filename)
        if match:
            run_single_action(action['command'], match.groups())
            action_taken = True
    return action_taken


def daemon(session):
    log = session.query(pet.models.Config.value).filter_by(
        key='log_file').scalar() or '/dev/null'
    log = os.path.expanduser(log)

    with open("/dev/null", "r") as devnull:
        os.dup2(devnull.fileno(), 0)
    with open(log, "a") as fh:
        os.dup2(fh.fileno(), 1)
        os.dup2(fh.fileno(), 2)

    os.chdir("/")
    pid = os.fork()
    if pid != 0:
        sys.exit()
    pid = os.fork()
    if pid != 0:
        sys.exit()


def main():
    session = pet.models.Session()
    path = (session.query(pet.models.Config.value)
            .filter_by(key='request_directory').scalar() or
            '/srv/pet.debian.net/requests')
    watch = setup_watch(path)

    actions = [
        dict(re=re.compile('\Aupdate-([A-Za-z0-9-]+)\Z'),
             command=['update-repository']),
        dict(re=re.compile('\Aarchive-([A-Za-z0-9-]+)\Z'),
             command=['update-archive']),
        dict(re=re.compile('\Abts-([A-Za-z0-9-]+)\Z'),
             command=['update-bts']),
        dict(re=re.compile('\Awatch\Z'),
             command=['update-watch']),
    ]

    daemon(session)

    session.close()
    while True:
        inotifyx.get_events(watch)
        for filename in os.listdir(path):
            if run_action(actions, filename):
                os.unlink(os.path.join(path, filename))
            else:
                print "E: Unknown request '{0}'".format(filename)

if __name__ == '__main__':
    main()
